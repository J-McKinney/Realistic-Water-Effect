{"version":3,"sources":["logo.svg","WaterEffect/WaterEffect.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","WaterEffect","Container","className","id","x","y","width","height","numOctaves","baseFrequency","scale","in","href","attributeName","dur","keyTimes","values","repeatCount","Component","App","src","logo","alt","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6HAAAA,EAAOC,QAAU,IAA0B,kC,iNC+C5BC,G,kKA1Cb,WACE,OACE,oCACE,kBAACC,EAAA,EAAD,KACE,yBAAKC,UAAU,cACb,yBAAKA,UAAU,WAGjB,6BAGE,4BAAQC,GAAG,aAAaC,EAAE,IAAIC,EAAE,IAAIC,MAAM,OAAOC,OAAO,QAGtD,kCACEJ,GAAG,aACHK,WAAW,IACXC,cAAc,cAIhB,uCAAmBC,MAAM,KAAKC,GAAG,kBAKjC,6BACEC,KAAK,cACLC,cAAc,gBACdC,IAAI,MACJC,SAAS,UACTC,OAAO,gCACPC,YAAY,uB,GAjCFC,c,sBCyBXC,MAxBf,WACE,OACE,oCACE,yBAAKjB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKkB,IAAKC,IAAMnB,UAAU,WAAWoB,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEpB,UAAU,WACVU,KAAK,sBACLW,OAAO,SACPC,IAAI,uBAJN,gBASF,kBAAC,EAAD,SCXYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8fc8b558.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport \"./WaterEffect.css\";\r\n\r\nclass WaterEffect extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Container>\r\n          <div className=\"background\">\r\n            <div className=\"water\"></div>\r\n          </div>\r\n\r\n          <svg>\r\n            {/*changing the width changes the columns across the page and the effects \r\n           changing the height changes the rows across the page and the effects*/}\r\n            <filter id=\"turbulence\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\r\n              {/*changing the numOctaves changes the fluid motion of the wave effects, faster=lowerNumber slower=higherNumbe \r\n             The baseFrequency attribute represents the base frequency parameter for the noise function of the <feTurbulence> filter primitive, Only one element is using this attribute: <feTurbulence>*/}\r\n              <feTurbulence\r\n                id=\"sea-filter\"\r\n                numOctaves=\"1\"\r\n                baseFrequency=\"0.02 0.05\"\r\n              />\r\n              {/*wave effect is affected by scale attribute higherNumber=big shrink-little shrink \r\n                 where SourceGraphic(x,y) is the input image, in, and SourceGraphic'(x,y) is the destination, overlapping image to create that wave effect */}\r\n              <feDisplacementMap scale=\"20\" in=\"SourceGraphic\" />\r\n              {/*xlink:href=\"#sea-filter\", creates the 2 images to overlap and make it look like the ocean is moving\r\n                attributeName=\"baseFrequency\", links up with the dur(duration time) and keyTimes\r\n                the values mess with the amount of wave in-between each wave effect differently\r\n                the repeat count, I hope. is obvious*/}\r\n              <animate\r\n                href=\"#sea-filter\"\r\n                attributeName=\"baseFrequency\"\r\n                dur=\"50s\"\r\n                keyTimes=\"0;0.5;1\"\r\n                values=\"0.02 0.06;0.04 0.08;0.02 0.06\"\r\n                repeatCount=\"indefinite\"\r\n              />\r\n            </filter>\r\n          </svg>\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WaterEffect;\r\n","import React from \"react\";\nimport WaterEffect from \"./WaterEffect/WaterEffect\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n        <WaterEffect />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}